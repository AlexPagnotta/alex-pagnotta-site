---
import { parse, compareDesc, format } from 'date-fns'

import Hero from '../components/Hero.astro'
import ItemList from '../components/ItemList.astro'
import ItemPreview from '../components/ItemPreview.astro'
import Section from '../components/Section.astro'
import Slideshow from '../components/Slideshow'
import Text from '../components/Text/Text.astro'
import Layout from '../layouts/Layout.astro'

const parsePublishDate = (date: string) => parse(date, 'dd/MM/yyyy', new Date())

type PostFrontmatter = {
  title: string
  description?: string
  publishDate: string
}

type Post = Omit<PostFrontmatter, 'publishDate'> & {
  url?: string
  publishDate: Date
  publishDateMonth: string
  publishDateYear: string
}

const posts: Post[] = await Astro.glob<PostFrontmatter>(
  '../pages/blog/*.md'
).then((posts) =>
  posts
    .map(({ frontmatter, url }) => {
      const publishDate = parsePublishDate(frontmatter.publishDate)

      return {
        title: frontmatter.title,
        description: frontmatter.description,
        publishDate,
        publishDateMonth: format(publishDate, 'MM'),
        publishDateYear: format(publishDate, 'yyyy'),
        url: url,
      }
    })
    .sort((a, b) => {
      return compareDesc(a.publishDate, b.publishDate)
    })
)

type PlaygroundFormatter = {
  title: string
  description?: string
  publishDate: string
  tags: string[]
}

type Playground = Omit<PlaygroundFormatter, 'publishDate'> & {
  url?: string
  publishDate: Date
}

const playgroundPosts: Playground[] = await Astro.glob<PlaygroundFormatter>(
  '../pages/playground/*.md'
).then((posts) =>
  posts
    .map(({ frontmatter, url }) => {
      const publishDate = parsePublishDate(frontmatter.publishDate)

      return {
        title: frontmatter.title,
        description: frontmatter.description,
        publishDate,
        tags: frontmatter.tags,
        url: url,
      }
    })
    .sort((a, b) => {
      return compareDesc(a.publishDate, b.publishDate)
    })
)
---

<Layout current={'home'}>
  <main>
    <Hero subTitle='Website'
      >This is my blog, sometimes I write about things, cool things. Lorem Ipsum
      dolor sit amet.
    </Hero>
    <Section title='Projects' subTitle={'View All'} subtitleLink={'/projects'}>
      <Slideshow client:only='preact'>
        <Text size='title-1'>CIAO</Text>
      </Slideshow>
    </Section>
    <Section title='Posts' subTitle={'View All'} subtitleLink={'/blog'}>
      <ItemList>
        {posts.map((post) => {
          return (
            <ItemPreview link={post.url}>
              <Fragment slot='subTitle'>
                {post.publishDateMonth}
                <span class='font-bold'>{post.publishDateYear}</span>
              </Fragment>
              <Fragment slot='title'>{post.title}</Fragment>
              {post.description && (
                <Fragment slot='body'>{post.description}</Fragment>
              )}
            </ItemPreview>
          )
        })}
      </ItemList>
    </Section>
    <Section
      title='Playground'
      subTitle={'View All'}
      subtitleLink={'/playground'}
    >
      <ItemList>
        {playgroundPosts.map((post) => {
          return (
            <ItemPreview link={post.url}>
              <Fragment slot='subTitle'>
                {post.tags && post.tags.map((tag) => `#${tag}`).join(' ')}
              </Fragment>
              <Fragment slot='title'>{post.title}</Fragment>
              <Fragment slot='body'>{post.description}</Fragment>
            </ItemPreview>
          )
        })}
      </ItemList>
    </Section>
  </main>
</Layout>
